import heapq
A = [1, 1, 1]
B = [1, 1, 2]
A = [1, 2, 3]
B = [4, 5, 6]
# A = [ 2, 2, 4, 1, 2, 4, 2 ]
# B = [ 3, 3, 4, 5 ]
# A = [ 336, 191, 584, 169, 69, 855, 625, 249, 751, 918, 727, 633, 417, 326, 686, 520, 771, 142, 465, 687, 107, 200, 117, 581, 988, 801, 36, 19, 674, 66, 820, 969, 571, 753, 191, 428, 571, 205, 439, 237, 941, 194, 366, 679, 773, 51, 255, 505, 465, 935, 884, 717, 315, 282, 401, 298, 979, 345, 163, 354, 56, 3, 288, 686, 403, 52, 544, 389, 177, 151, 407, 940, 212, 632, 824, 140, 285, 6, 930, 450, 355, 153, 273, 479, 571, 931, 758, 726, 788, 943, 639, 965, 274, 262, 346, 838, 211, 909, 356, 866, 813, 175, 417, 200, 523, 123, 645, 280, 837, 299, 832, 522, 907, 653, 456, 577, 279, 770, 174, 514, 560, 812, 186, 543, 32, 959, 318, 812, 696, 210, 948, 436, 388, 440, 451, 771, 927, 548 ]
# B = [ 395, 421, 169, 890, 595, 872, 6, 448, 487, 195, 851, 670, 762, 154, 405, 893, 991, 638, 273, 360, 879, 717, 377, 376, 691, 445, 614, 659, 85, 753, 447, 585, 766, 360, 793, 62, 32, 160, 930, 830, 249, 160, 69, 675, 544, 171, 132, 305, 484, 270, 109, 292, 86, 508, 758, 141, 939, 159, 59, 228, 570, 619, 923, 481, 5, 860, 556, 935, 520, 4, 937, 267, 516, 677, 16, 570, 155, 945, 88, 497, 230, 297, 697, 702, 35, 934, 231, 224, 225, 32, 209, 827, 343, 926, 957, 719, 213, 735, 792, 483, 272, 311, 655, 77, 316, 444, 962, 203, 628, 137, 27, 754, 670, 521, 382, 885, 230, 507, 414, 898, 731, 516, 745, 212, 453, 944, 197, 360, 334, 906, 222, 89, 651, 734, 358, 242, 70, 900, 571, 785, 918, 366, 259, 892, 539, 848, 746, 453, 803, 542, 974, 571, 155, 397, 494, 163, 584, 802, 71, 120, 687, 235, 980, 157, 832, 994, 220, 205, 696, 76, 535, 337, 883, 365, 462, 522, 983, 482, 793, 46, 692, 189, 280, 419, 882, 613, 832, 920, 60, 911, 171, 264, 373, 857, 172, 654, 271, 536, 535, 829, 64, 846, 290, 853, 128, 2, 789, 216, 658, 437, 49, 608, 545, 651, 942, 822, 701, 674, 164, 434, 856, 312, 196, 170, 95, 139, 732, 160, 420, 101, 663, 382, 658, 956, 897, 168, 250, 203, 115, 934, 663, 764, 600, 689, 514, 462, 917, 543, 768, 508, 939, 728, 280, 764, 780, 395, 17, 706, 694, 477, 114, 473, 580, 53, 236, 550, 133, 179, 192, 923, 589, 15, 577, 964, 460, 96, 455, 573, 141, 40, 776, 177, 512, 507, 798, 646, 30, 782, 138, 469, 842, 720, 809, 786, 336, 291, 246, 166, 661, 915, 714, 597, 73, 216, 561, 891, 601, 85, 400, 191, 462, 332, 800, 210, 384, 75, 77, 218, 266, 635, 268, 803, 894, 157, 331, 238, 108, 227, 905, 539, 882, 255, 208, 162, 343, 488, 377, 964, 907, 871, 633, 70, 972, 834, 440, 329, 587, 678, 551, 780, 268, 238, 896, 749, 278, 618, 46, 92, 995, 831, 640, 601, 417, 506, 584, 930, 945, 812, 81, 977, 86, 184, 943, 543, 700, 637, 864, 142, 267, 390, 797, 598, 552, 503, 631, 408, 494, 51, 86, 186, 653, 970, 585, 655, 854, 170, 638, 707, 758, 915, 483, 500, 425, 877, 523, 98, 86, 320, 159, 894, 840, 554, 150, 356, 461, 390, 559, 71, 153, 253, 817, 448, 934, 312, 29, 885, 653, 328, 829, 917, 112, 187, 237, 449, 133, 493, 417, 29, 335, 51, 548, 142, 441, 737, 216, 893, 353, 659, 689, 686, 340, 435, 406, 255, 976, 58, 488, 862, 895, 916, 731, 370, 884, 718, 3, 321, 227, 795, 998, 122, 314, 182, 95, 54, 220, 271, 251, 518, 455, 294, 781, 351, 468, 716, 244, 289, 204, 654, 716, 535, 320, 971, 731, 680, 660, 466, 231, 675, 987, 728, 685, 68, 42, 233, 548, 696, 872, 644, 952, 913, 204, 433, 743, 406, 614, 665, 177, 981, 400, 119, 298, 64, 726, 682, 589, 131, 549, 573, 367, 622, 93, 378, 839, 584, 245, 802, 35, 738, 755, 32, 257, 478, 272, 55, 860, 171, 183, 475, 592, 450, 953, 708, 789, 724, 126, 142, 164, 54, 967, 120, 997, 482, 284, 884, 224, 83, 18, 771, 476, 688, 340, 653, 115, 72, 221, 600, 943, 252, 759, 505, 116, 751, 349, 616, 668, 724, 172, 648, 620, 984, 374, 14, 752, 605, 330, 31, 708, 379, 61, 212, 669, 495, 160, 695, 547, 370, 408, 121, 554, 28, 811, 875, 380, 189, 814, 492, 537, 791, 647, 337, 640, 396, 995, 282, 296, 744, 253, 850, 771, 936, 90, 583, 47, 485, 144, 672, 172, 788, 831, 849, 31, 258, 524, 548, 435, 315, 995, 504, 742, 889, 839, 105, 653, 141, 277, 728, 357, 40, 240, 287, 234, 157, 968, 349, 163, 14, 283, 498, 342, 684, 203, 310, 860, 125, 464, 939, 408, 529, 167, 716, 350, 202, 902, 147, 552, 772, 855, 280, 826, 916, 956, 595, 399, 386, 826, 208, 877, 927, 822, 819, 872, 348, 216, 161, 697, 80, 191, 228, 281, 43, 932, 860, 502, 280, 709, 640, 127, 234, 360, 364, 287, 56, 609, 548, 491, 34, 742, 869, 547, 819, 549, 446, 11, 854, 61, 188, 518, 974, 833, 30, 339, 287, 431, 404, 903, 177, 398, 132, 259, 731, 678, 737, 466, 728, 900, 36, 927, 217, 999, 561, 878, 737, 587, 462, 153, 551, 974, 954, 515, 29, 291, 851, 265, 140, 32, 108, 235, 378, 118, 991, 177, 464, 700, 59, 326, 547, 569, 527, 706, 721, 213, 460, 243, 835, 160, 231, 277, 739, 592, 206, 170, 784, 907, 743, 506, 815, 191, 203, 683, 703, 826, 251, 606, 778, 434, 223, 628, 593, 300, 436, 932, 898, 932, 982, 366, 33, 932, 574, 329, 957, 696, 570, 614, 602, 764, 269, 652, 140, 246, 762, 760, 49, 973, 257, 603, 708, 302, 35, 559, 534 ]

# matrx = [[0 for i in range(len(B)+1)] for j in range(len(A)+1)]
# print(matrx)
mod = 1000000007
# rows = len(A)+1
# colms = len(B) + 1
#
# q = []
# heapq.heapify(q)
# visit = set()
# heapq.heappush(q,(0,0,0))
# ans = 0
# hmap = {}
# while q:
#     # print(q)
#     cost,x,y = heapq.heappop(q)
#     # print(cost,x,y)
#     if (x,y) not in visit:
#         direction = [[1, 0], [0, 1]]
#         for dx,dy in direction:
#             x_co = x + dx
#             y_co = y + dy
#             if x_co in range(rows) and y_co in range(colms) and (x_co,y_co) not in visit:
#                 if dx == 1:
#                     val = A[x_co-1]
#                 else:
#                     val = B[y_co-1]
#                 # visit.add((x_co,y_co))
#                 heapq.heappush(q,(val,x_co,y_co))
#         visit.add((x,y))
# total_cost = 0
# print(ans)
# [[0, 4, 9, 15],
#  [1, 5, 10, 16],
#  [3, 7, 12, 18],
#  [6, 10, 15, 21]]
# [[0, 1, 2, 4],
#  [1, 2, 3, 5],
#  [2, 3, 4, 6],
#  [3, 4, 5, 7]]

edges = []
for i in range(len(A)):
    edges.append((A[i],0))
    edges.append((B[i],1))

print(edges)
edges.sort(key=lambda x:x[0])
print(edges)

N = len(A)+1
M = len(B)+1

total_cost = 0
for cost,edge in edges:
    if edge == 0:
        total_cost += (cost * M)
        N -= 1
    else:
        total_cost += (cost*N)
        M-= 1
print(total_cost)
